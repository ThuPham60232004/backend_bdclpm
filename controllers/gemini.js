import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import Category from '../models/categories.js'; 
import Income from '../models/income.js';
import moment from 'moment';

dotenv.config();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export const processTextWithGemini = async (req, res) => {
    try {
        const { extractedText } = req.body;
        if (!extractedText) {
            return res.status(400).json({ status: 'error', message: 'Kh√¥ng c√≥ vƒÉn b·∫£n h√≥a ƒë∆°n ƒë∆∞·ª£c cung c·∫•p' });
        }
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const prompt = `
            Ph√¢n t√≠ch v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ vƒÉn b·∫£n h√≥a ƒë∆°n sau d∆∞·ªõi d·∫°ng JSON:
            - X√°c ƒë·ªãnh danh m·ª•c chi ti√™u ph√π h·ª£p v·ªõi danh s√°ch d∆∞·ªõi ƒë√¢y:
              1. Th·ª±c ph·∫©m (C√°c m·∫∑t h√†ng li√™n quan ƒë·∫øn th·ª±c ph·∫©m) üçΩÔ∏è
              2. ƒêi·ªán t·ª≠ (Thi·∫øt b·ªã v√† d·ª•ng c·ª• ƒëi·ªán t·ª≠) üì±
              3. D·ªãch v·ª• (C√°c d·ªãch v·ª• v√† ti·ªán √≠ch) üíº
              4. Th·ªùi trang (Qu·∫ßn √°o v√† ph·ª• ki·ªán th·ªùi trang) üëó
              5. V·∫≠n chuy·ªÉn (D·ªãch v·ª• v·∫≠n chuy·ªÉn v√† logistics) üöö
              6. Kh√°c (C√°c m·∫∑t h√†ng kh√°c) ‚ùì
              
            - Cung c·∫•p m√¥ t·∫£ v·ªÅ n·ªôi dung chi ti√™u c·ªßa h√≥a ƒë∆°n trong m·ª•c "description".

            - Tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
            {
              "storeName": "T√™n c·ª≠a h√†ng",
              "totalAmount": "T·ªïng s·ªë ti·ªÅn",
              "date": "Ng√†y mua",
              "items": [
                { "name": "T√™n s·∫£n ph·∫©m", "quantity": "S·ªë l∆∞·ª£ng", "price": "Gi√°" }
              ],
              "category": {
                "_id": "ID danh m·ª•c",
                "name": "T√™n danh m·ª•c",
                "description": "M√¥ t·∫£ chi ti√™u",
                "icon": "Bi·ªÉu t∆∞·ª£ng danh m·ª•c (emoji ho·∫∑c URL)"
              }
            }

            VƒÉn b·∫£n h√≥a ƒë∆°n: "${extractedText}"
        `;
        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = response.text().trim();
        rawText = rawText.replace(/```json|```/g, '').trim();
        let parsedData;
        try {
            parsedData = JSON.parse(rawText);
        } catch (jsonError) {
            console.error("L·ªói JSON:", jsonError);
            return res.status(500).json({ status: 'error', message: 'L·ªói x·ª≠ l√Ω JSON t·ª´ AI' });
        }
        const matchedCategory = await Category.findOne({ name: parsedData.category.name });

        if (matchedCategory) {
            parsedData.category = {
                _id: matchedCategory._id,
                name: matchedCategory.name,
                description: matchedCategory.description,
                icon: matchedCategory.icon
            };
        } else {
            parsedData.category = {
                _id: "678cf12ee729fb9da6737256",
                name: "Kh√°c",
                description: "C√°c m·∫∑t h√†ng kh√°c",
                icon: "category"
            };
        }
        const totalAmount = parsedData.totalAmount;
        const description = `Chi ti√™u t·ªïng c·ªông ${totalAmount} VND cho c√°c m·∫∑t h√†ng trong danh m·ª•c ${parsedData.category.name}.`;
        parsedData.category.description = description;
        res.json({
            status: 'success',
            data: parsedData
        });
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};
const userSessions = {}; 

export const handleIncomeCommand = async (req, res) => {
    try {
        const { message, userId } = req.body;
        if (!message || !userId) {
            return res.status(400).json({ status: 'error', message: 'Thi·∫øu th√¥ng tin tin nh·∫Øn ho·∫∑c userId' });
        }

        const userMessage = message.trim().toLowerCase(); 
        if (!userSessions[userId]) {
            userSessions[userId] = { amount: null, description: null, date: null, confirmed: false };
        }
        const session = userSessions[userId];
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        
        const responses = [
            { keywords: ["chi ti√™u", "ƒë·∫ßu t∆∞", "spending", "investment"], message: "ƒê√¢y l√† m·ªôt c√¢u h·ªèi v·ªÅ t√†i ch√≠nh. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin ƒë·ªÉ t√¥i h·ªó tr·ª£ chi ti·∫øt h∆°n v·ªÅ chi ti√™u ho·∫∑c ƒë·∫ßu t∆∞, v√≠ d·ª• nh∆∞ b·∫°n mu·ªën ti·∫øt ki·ªám hay ƒë·∫ßu t∆∞ v√†o lƒ©nh v·ª±c n√†o?" },
            { keywords: ["ch√†o", "gi·ªõi thi·ªáu", "hello", "introduce","hi","helo","halo","xin ch√†o"], message: "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω t√†i ch√≠nh c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω chi ti√™u, ƒë·∫ßu t∆∞, ho·∫∑c gi·∫£i th√≠ch c√°c kh√°i ni·ªám t√†i ch√≠nh. B·∫°n c·∫ßn gi√∫p g√¨ ngay b√¢y gi·ªù?" },
            { keywords: ["kh√°i ni·ªám", "ƒë·ªãnh nghƒ©a", "concept", "definition"], message: "B·∫°n mu·ªën t√¥i gi·∫£i th√≠ch kh√°i ni·ªám n√†o trong t√†i ch√≠nh? V√≠ d·ª• nh∆∞ ti·∫øt ki·ªám, ƒë·∫ßu t∆∞, t·ª∑ l·ªá l·∫°m ph√°t hay m·ªôt kh√°i ni·ªám kh√°c. H√£y cho t√¥i bi·∫øt!" },
            { keywords: ["l√£i su·∫•t", "vay m∆∞·ª£n", "interest rate", "loan"], message: "L√£i su·∫•t l√† m·ªôt ph·∫ßn quan tr·ªçng trong c√°c giao d·ªãch t√†i ch√≠nh. B·∫°n c·∫ßn gi·∫£i th√≠ch v·ªÅ l√£i su·∫•t vay m∆∞·ª£n hay l√£i su·∫•t ti·∫øt ki·ªám?" },
            { keywords: ["t√†i s·∫£n", "n·ª£", "v·ªën", "ch·ª©ng kho√°n", "assets", "debt", "capital", "stocks"], message: "T√†i s·∫£n v√† n·ª£ l√† c√°c y·∫øu t·ªë quan tr·ªçng trong vi·ªác qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n. B·∫°n c·∫ßn t√¨m hi·ªÉu v·ªÅ c√°ch ph√¢n bi·ªát t√†i s·∫£n v√† n·ª£ ho·∫∑c c√°ch ƒë·∫ßu t∆∞ v√†o ch·ª©ng kho√°n?" },
            { keywords: ["ti·∫øt ki·ªám", "qu·ªπ h∆∞u tr√≠", "savings", "retirement fund"], message: "Ti·∫øt ki·ªám l√† m·ªôt c√°ch t·ªët ƒë·ªÉ ƒë·∫£m b·∫£o t√†i ch√≠nh trong t∆∞∆°ng lai. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ c√°ch l·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám ho·∫∑c t·∫°o m·ªôt qu·ªπ h∆∞u tr√≠?" },
            { keywords: ["ch·ª©ng kho√°n", "c·ªï phi·∫øu", "qu·ªπ ƒë·∫ßu t∆∞", "securities", "stocks", "investment funds"], message: "Ch·ª©ng kho√°n v√† c·ªï phi·∫øu l√† nh·ªØng l·ª±a ch·ªçn ƒë·∫ßu t∆∞ ph·ªï bi·∫øn. B·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa th·ªã tr∆∞·ªùng ch·ª©ng kho√°n v√† c√°c qu·ªπ ƒë·∫ßu t∆∞?" },
            { keywords: ["ng√¢n s√°ch", "chi ph√≠", "ti·∫øt ki·ªám", "budget", "expenses", "savings"], message: "L·∫≠p ng√¢n s√°ch v√† qu·∫£n l√Ω chi ph√≠ l√† nh·ªØng k·ªπ nƒÉng quan tr·ªçng trong t√†i ch√≠nh c√° nh√¢n. B·∫°n mu·ªën t√¥i gi√∫p b·∫°n t·∫°o m·ªôt ng√¢n s√°ch ti·∫øt ki·ªám?" },
            { keywords: ["k·∫ø ho·∫°ch t√†i ch√≠nh", "qu·∫£n l√Ω t√†i ch√≠nh", "financial plan", "financial management"], message: "K·∫ø ho·∫°ch t√†i ch√≠nh gi√∫p b·∫°n x√°c ƒë·ªãnh m·ª•c ti√™u v√† l·ªô tr√¨nh t√†i ch√≠nh. B·∫°n mu·ªën t√¥i gi√∫p b·∫°n x√¢y d·ª±ng m·ªôt k·∫ø ho·∫°ch t√†i ch√≠nh c√° nh√¢n?" },
            { keywords: ["ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n", "v√†ng", "crypto", "real estate investment", "gold", "cryptocurrency"], message: "ƒê·∫ßu t∆∞ v√†o b·∫•t ƒë·ªông s·∫£n, v√†ng hay crypto (ti·ªÅn ƒëi·ªán t·ª≠) l√† nh·ªØng l·ª±a ch·ªçn ƒë·∫ßu t∆∞ h·∫•p d·∫´n. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ m·ªôt trong nh·ªØng lo·∫°i ƒë·∫ßu t∆∞ n√†y?" }
        ];

        for (let response of responses) {
            if (response.keywords.some(keyword => userMessage.includes(keyword))) {
                return res.json({ status: 'success', message: response.message });
            }
        }

        const prompt = `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω t√†i ch√≠nh. H√£y ph√¢n t√≠ch tin nh·∫Øn v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
        {
          "amount": <s·ªë ti·ªÅn d·∫°ng s·ªë>,
          "description": "<m√¥ t·∫£>",
          "date": "<yyyy-mm-dd ho·∫∑c yyyy-mm ho·∫∑c yyyy>"
        }  
        N·∫øu thi·∫øu d·ªØ li·ªáu, h√£y ƒë·ªÉ gi√° tr·ªã l√† null.
        Tin nh·∫Øn: "${message}"
        B√™n c·∫°nh ƒë√≥ b·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i ch√≠nh nh∆∞ chi ti√™u, ƒë·∫ßu t∆∞, ho·∫∑c nh·ªØng c√¢u h·ªèi giao ti·∫øp th√¥ng th∆∞·ªùng nh∆∞ ch√†o h·ªèi, gi·ªõi thi·ªáu b·∫£n th√¢n, ho·∫∑c gi·∫£i th√≠ch c√°c kh√°i ni·ªám.
        `;

        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = response.text().trim();

        console.log("M√¥ h√¨nh AI tr·∫£ v·ªÅ:", rawText);  

        rawText = rawText.replace(/```json|```/g, '').trim();

        let parsedData;
        try {
            parsedData = JSON.parse(rawText);  
        } catch (error) {
            console.error("L·ªói ph√¢n t√≠ch JSON:", response);
            console.error("L·ªói ph√¢n t√≠ch JSON:", error);
            console.error("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", rawText); 
            return res.json({ status: 'pending', message: "Kh√¥ng th·ªÉ ph√¢n t√≠ch tin nh·∫Øn. Vui l√≤ng nh·∫≠p l·∫°i." });
        }

        if (parsedData.amount) session.amount = Number(parsedData.amount);
        if (parsedData.description) session.description = parsedData.description.trim();
        if (parsedData.date) session.date = parsedData.date.trim();

        if (session.date) {
            if (/^\d{4}-\d{2}$/.test(session.date)) { 
                return res.json({ 
                    status: 'pending', 
                    message: `B·∫°n ƒë√£ nh·∫≠p th√°ng ${session.date.split('-')[1]}/${session.date.split('-')[0]}. H√£y nh·∫≠p th√™m ng√†y c·ª• th·ªÉ (VD: 15/${session.date.split('-')[1]}/${session.date.split('-')[0]}).` 
                });
            }
            if (/^\d{4}$/.test(session.date)) {  
                return res.json({ 
                    status: 'pending', 
                    message: `B·∫°n ƒë√£ nh·∫≠p nƒÉm ${session.date}. H√£y nh·∫≠p th√™m th√°ng & ng√†y c·ª• th·ªÉ (VD: 01/06/${session.date}).` 
                });
            }
            if (!moment(session.date, 'YYYY-MM-DD', true).isValid()) {
                return res.json({ status: 'error', message: "Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD." });
            }
        }

        let missingFields = [];
        if (!session.amount) missingFields.push("s·ªë ti·ªÅn");
        if (!session.description) missingFields.push("m√¥ t·∫£");
        if (!session.date) missingFields.push("ng√†y");

        if (missingFields.length > 0) {
            return res.json({
                status: 'pending',
                message: `B·∫°n ch∆∞a nh·∫≠p ƒë·ªß th√¥ng tin. H√£y b·ªï sung: ${missingFields.join(", ")}.`,
            });
        }

        if (!session.confirmed) {
            session.confirmed = true;
            return res.json({ 
                status: 'pending', 
                message: `X√°c nh·∫≠n l∆∞u thu nh·∫≠p: ${session.amount.toLocaleString()} VND - "${session.description}" v√†o ng√†y ${session.date}? (X√°c nh·∫≠n / H·ªßy b·ªè)` 
            });
        }
        
        if (session.confirmed && ["x√°c nh·∫≠n", "confirm", "yes", "X√°c nh·∫≠n"].map(keyword => keyword.toLowerCase()).includes(userMessage.trim().toLowerCase())) {
            const newIncome = new Income({ 
                userId, 
                amount: session.amount, 
                description: session.description, 
                date: session.date 
            });
            await newIncome.save();
            delete userSessions[userId];
            return res.json({ status: 'success', message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c l∆∞u! üéâ", data: newIncome });
        }
        
        if (session.confirmed && ["h·ªßy b·ªè", "cancel", "no"].includes(userMessage.trim().toLowerCase())) {
            delete userSessions[userId];
            return res.json({ status: 'success', message: "ƒê√£ h·ªßy l∆∞u thu nh·∫≠p." });
        }
        
        return res.json({ status: 'pending', message: "H√£y x√°c nh·∫≠n ho·∫∑c nh·∫≠p th√™m th√¥ng tin." });
        
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};
