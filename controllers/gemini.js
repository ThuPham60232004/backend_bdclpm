import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import Category from '../models/categories.js'; 
import Income from '../models/income.js';
import moment from 'moment';
import Redis from 'ioredis';
dotenv.config();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export const processTextWithGemini = async (req, res) => {
    try {
        const { extractedText } = req.body;
        if (!extractedText) {
            return res.status(400).json({ status: 'error', message: 'Kh√¥ng c√≥ vƒÉn b·∫£n h√≥a ƒë∆°n ƒë∆∞·ª£c cung c·∫•p' });
        }
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const prompt = `
            Ph√¢n t√≠ch v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ vƒÉn b·∫£n h√≥a ƒë∆°n sau d∆∞·ªõi d·∫°ng JSON:
            - X√°c ƒë·ªãnh danh m·ª•c chi ti√™u ph√π h·ª£p v·ªõi danh s√°ch d∆∞·ªõi ƒë√¢y:
              1. Th·ª±c ph·∫©m (C√°c m·∫∑t h√†ng li√™n quan ƒë·∫øn th·ª±c ph·∫©m) üçΩÔ∏è
              2. ƒêi·ªán t·ª≠ (Thi·∫øt b·ªã v√† d·ª•ng c·ª• ƒëi·ªán t·ª≠) üì±
              3. D·ªãch v·ª• (C√°c d·ªãch v·ª• v√† ti·ªán √≠ch) üíº
              4. Th·ªùi trang (Qu·∫ßn √°o v√† ph·ª• ki·ªán th·ªùi trang) üëó
              5. V·∫≠n chuy·ªÉn (D·ªãch v·ª• v·∫≠n chuy·ªÉn v√† logistics) üöö
              6. Kh√°c (C√°c m·∫∑t h√†ng kh√°c) ‚ùì
              
            - Cung c·∫•p m√¥ t·∫£ v·ªÅ n·ªôi dung chi ti√™u c·ªßa h√≥a ƒë∆°n trong m·ª•c "description".

            - Tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
            {
              "storeName": "T√™n c·ª≠a h√†ng",
              "totalAmount": "T·ªïng s·ªë ti·ªÅn",
              "date": "Ng√†y mua",
              "items": [
                { "name": "T√™n s·∫£n ph·∫©m", "quantity": "S·ªë l∆∞·ª£ng", "price": "Gi√°" }
              ],
              "category": {
                "_id": "ID danh m·ª•c",
                "name": "T√™n danh m·ª•c",
                "description": "M√¥ t·∫£ chi ti√™u",
                "icon": "Bi·ªÉu t∆∞·ª£ng danh m·ª•c (emoji ho·∫∑c URL)"
              }
            }

            VƒÉn b·∫£n h√≥a ƒë∆°n: "${extractedText}"
        `;
        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = response.text().trim();
        rawText = rawText.replace(/```json|```/g, '').trim();
        let parsedData;
        try {
            parsedData = JSON.parse(rawText);
        } catch (jsonError) {
            console.error("L·ªói JSON:", jsonError);
            return res.status(500).json({ status: 'error', message: 'L·ªói x·ª≠ l√Ω JSON t·ª´ AI' });
        }
        const matchedCategory = await Category.findOne({ name: parsedData.category.name });

        if (matchedCategory) {
            parsedData.category = {
                _id: matchedCategory._id,
                name: matchedCategory.name,
                description: matchedCategory.description,
                icon: matchedCategory.icon
            };
        } else {
            parsedData.category = {
                _id: "678cf12ee729fb9da6737256",
                name: "Kh√°c",
                description: "C√°c m·∫∑t h√†ng kh√°c",
                icon: "category"
            };
        }
        const totalAmount = parsedData.totalAmount;
        const description = `Chi ti√™u t·ªïng c·ªông ${totalAmount} VND cho c√°c m·∫∑t h√†ng trong danh m·ª•c ${parsedData.category.name}.`;
        parsedData.category.description = description;
        res.json({
            status: 'success',
            data: parsedData
        });
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};
const redis = new Redis();

export const handleIncomeCommand = async (req, res) => {
    try {
        const { message, userId } = req.body;
        if (!message || !userId) {
            return res.status(400).json({ status: 'error', message: 'Thi·∫øu th√¥ng tin tin nh·∫Øn ho·∫∑c userId' });
        }

        const userMessage = message.trim().toLowerCase();

        let sessionData = await redis.get(`session:${userId}`);
        let session = sessionData ? JSON.parse(sessionData) : { amount: null, description: null, date: null, confirmed: false };
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const prompt = `H√£y ph√¢n t√≠ch tin nh·∫Øn v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
        {
          "amount": <s·ªë ti·ªÅn d·∫°ng s·ªë>,
          "description": "<m√¥ t·∫£>",
          "date": "<yyyy-mm-dd ho·∫∑c yyyy-mm ho·∫∑c yyyy>"
        }  
        Tin nh·∫Øn: "${message}"`;

        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = response.text().trim();
        let parsedData;

        try {
            parsedData = JSON.parse(rawText);
        } catch (error) {
            return res.json({ status: 'pending', message: "Kh√¥ng th·ªÉ ph√¢n t√≠ch tin nh·∫Øn. Vui l√≤ng nh·∫≠p l·∫°i." });
        }

        if (parsedData.amount) session.amount = Number(parsedData.amount);
        if (parsedData.description) session.description = parsedData.description.trim();
        if (parsedData.date) session.date = parsedData.date.trim();

        if (session.date && !moment(session.date, 'YYYY-MM-DD', true).isValid()) {
            return res.json({ status: 'error', message: "Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD." });
        }

        let missingFields = [];
        if (!session.amount) missingFields.push("s·ªë ti·ªÅn");
        if (!session.description) missingFields.push("m√¥ t·∫£");
        if (!session.date) missingFields.push("ng√†y");

        if (missingFields.length > 0) {
            return res.json({ status: 'pending', message: `B·∫°n ch∆∞a nh·∫≠p ƒë·ªß th√¥ng tin. H√£y b·ªï sung: ${missingFields.join(", ")}.` });
        }

        // L∆∞u session v√†o Redis v·ªõi th·ªùi gian t·ªìn t·∫°i 10 ph√∫t
        await redis.setex(`session:${userId}`, 600, JSON.stringify(session));

        if (!session.confirmed) {
            session.confirmed = true;
            await redis.setex(`session:${userId}`, 600, JSON.stringify(session));
            return res.json({ 
                status: 'pending', 
                message: `X√°c nh·∫≠n l∆∞u thu nh·∫≠p: ${session.amount.toLocaleString()} VND - "${session.description}" v√†o ng√†y ${session.date}? (C√≥ / Kh√¥ng)`
            });
        }

        if (session.confirmed && ["c√≥", "yes"].includes(userMessage)) {
            const newIncome = new Income({ userId, amount: session.amount, description: session.description, date: session.date });
            await newIncome.save();
            await redis.del(`session:${userId}`); // X√≥a session khi l∆∞u xong
            return res.json({ status: 'success', message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c l∆∞u! üéâ", data: newIncome });
        }

        if (session.confirmed && ["kh√¥ng", "no"].includes(userMessage)) {
            await redis.del(`session:${userId}`); // X√≥a session n·∫øu ng∆∞·ªùi d√πng h·ªßy
            return res.json({ status: 'success', message: "ƒê√£ h·ªßy l∆∞u thu nh·∫≠p." });
        }

        return res.json({ status: 'pending', message: "H√£y x√°c nh·∫≠n ho·∫∑c nh·∫≠p th√™m th√¥ng tin." });

    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};