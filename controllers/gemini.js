import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import Category from '../models/categories.js';
import Income from '../models/income.js';
import moment from 'moment';

dotenv.config();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export const processTextWithGemini = async (req, res) => {
    try {
        const { extractedText } = req.body;
        if (!extractedText) {
            return res.status(400).json({ status: 'error', message: 'Kh√¥ng c√≥ vƒÉn b·∫£n h√≥a ƒë∆°n ƒë∆∞·ª£c cung c·∫•p' });
        }

        const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-002" });
        const prompt = `
            Ph√¢n t√≠ch v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ vƒÉn b·∫£n h√≥a ƒë∆°n sau d∆∞·ªõi d·∫°ng JSON:
            - X√°c ƒë·ªãnh danh m·ª•c chi ti√™u ph√π h·ª£p v·ªõi danh s√°ch d∆∞·ªõi ƒë√¢y:
              1. Th·ª±c ph·∫©m (C√°c m·∫∑t h√†ng li√™n quan ƒë·∫øn th·ª±c ph·∫©m) üçΩÔ∏è
              2. ƒêi·ªán t·ª≠ (Thi·∫øt b·ªã v√† d·ª•ng c·ª• ƒëi·ªán t·ª≠) üì±
              3. D·ªãch v·ª• (C√°c d·ªãch v·ª• v√† ti·ªán √≠ch) üíº
              4. Th·ªùi trang (Qu·∫ßn √°o v√† ph·ª• ki·ªán th·ªùi trang) üëó
              5. V·∫≠n chuy·ªÉn (D·ªãch v·ª• v·∫≠n chuy·ªÉn v√† logistics) üöö
              6. Kh√°c (C√°c m·∫∑t h√†ng kh√°c) ‚ùì
            - Tr·∫£ v·ªÅ JSON **duy nh·∫•t**, kh√¥ng k√®m theo gi·∫£i th√≠ch.
            - Cung c·∫•p m√¥ t·∫£ v·ªÅ n·ªôi dung chi ti√™u c·ªßa h√≥a ƒë∆°n trong m·ª•c "description".
            - X√°c ƒë·ªãnh v√† ph√¢n lo·∫°i ch√≠nh x√°c lo·∫°i ti·ªÅn t·ªá (VD: ti·ªÅn vi·ªát, ti·ªÅn ƒë√¥, ti·ªÅn th√°i,...)ngo√†i raLo·∫°i ti·ªÅn ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ k√Ω hi·ªáu trong vƒÉn b·∫£n (VD: $, ‚Ç¨, ¬•, ‚Ç´). N·∫øu c√≥ nhi·ªÅu lo·∫°i ti·ªÅn, ch·ªçn lo·∫°i xu·∫•t hi·ªán nhi·ªÅu nh·∫•t.
            - Chu·∫©n h√≥a ng√†y sang ƒë·ªãnh d·∫°ng ISO (YYYY-MM-DD).
            - Tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
            {
              "storeName": "T√™n c·ª≠a h√†ng",
              "totalAmount": "T·ªïng s·ªë ti·ªÅn",
              "currency": "Lo·∫°i ti·ªÅn t·ªá",
             "date": "Ng√†y mua (ISO format)",
              "items": [
                { "name": "T√™n s·∫£n ph·∫©m", "quantity": "S·ªë l∆∞·ª£ng", "price": "Gi√°" }
              ],
              "category": {
                "_id": "ID danh m·ª•c",
                "name": "T√™n danh m·ª•c",
                "description": "M√¥ t·∫£ chi ti√™u",
                "icon": "Bi·ªÉu t∆∞·ª£ng danh m·ª•c (emoji ho·∫∑c URL)"
              }
            }

            VƒÉn b·∫£n h√≥a ƒë∆°n: "${extractedText}"
        `;

        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = response.text().trim();
        rawText = rawText.replace(/```json|```/g, '').trim();
        console.log("Raw JSON t·ª´ Gemini:", rawText);
        const jsonMatch = rawText.match(/\{[\s\S]*\}$/);
            if (!jsonMatch) {
                return res.status(500).json({ status: 'error', message: 'Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong ph·∫£n h·ªìi t·ª´ AI' });
            }

            const jsonString = jsonMatch[0]; 
            console.log("JSON h·ª£p l·ªá t·ª´ Gemini:", jsonString);
        let parsedData;
        try {
            parsedData = JSON.parse(jsonString);
        } catch (jsonError) {
            console.error("L·ªói JSON:", jsonError);
            return res.status(500).json({ status: 'error', message: 'L·ªói x·ª≠ l√Ω JSON t·ª´ AI' });
        }

        parsedData.date = moment(parsedData.date, moment.ISO_8601, true).isValid()
        ? moment(parsedData.date).format('YYYY-MM-DD')
        : moment().format('YYYY-MM-DD');

        if (!parsedData.currency || parsedData.currency === "Kh√¥ng x√°c ƒë·ªãnh"||parsedData.currency === "VNƒê") {
            if (/\$/.test(extractedText)) {
                parsedData.currency = "USD";
            } else if (/‚Ç¨/.test(extractedText)) {
                parsedData.currency = "EUR";
            } else if (/¬•/.test(extractedText)) {
                parsedData.currency = "JPY";
            } else if (/‡∏ø/.test(extractedText)) { 
                parsedData.currency = "THB";
            } 
            else {
                parsedData.currency = "VND"; 
            }
        }
        if (!parsedData.totalAmount && parsedData.items?.length > 0) {
            parsedData.totalAmount = parsedData.items.reduce((total, item) => {
                const quantity = parseFloat(item.quantity) || 1;
                const price = parseFloat(item.price) || 0;
                return total + quantity * price;
            }, 0).toFixed(2);
        }
        const matchedCategory = await Category.findOne({ name: parsedData.category.name });

        if (matchedCategory) {
            parsedData.category = {
                _id: matchedCategory._id,
                name: matchedCategory.name,
                description: matchedCategory.description,
                icon: matchedCategory.icon
            };
        } else {
            parsedData.category = {
                _id: "678cf12ee729fb9da6737256",
                name: "Kh√°c",
                description: "C√°c m·∫∑t h√†ng kh√°c",
                icon: "category"
            };
        }
        const totalAmount = parsedData.totalAmount;
        const description = `Chi ti√™u t·ªïng c·ªông ${totalAmount} ${parsedData.currency} c√°c m·∫∑t h√†ng trong danh m·ª•c ${parsedData.category.name}.`;
        parsedData.category.description = description;

        res.json({
            status: 'success',
            data: parsedData
        });
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};
const userSessions = {}; 
export const handleIncomeCommand = async (req, res) => {
    try {
        const { message, userId } = req.body;
        if (!message || !userId) {
            return res.status(400).json({ status: 'error', message: 'thi·∫øu th√¥ng tin tin nh·∫Øn ho·∫∑c userId' });
        }

        const userMessage = message.trim().toLowerCase();
        if (!userSessions[userId]) {
            userSessions[userId] = { amount: null, description: null, date: null, confirmed: false };
        }
        const session = userSessions[userId];
        const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

        const responses = [
            { keywords: ['chi ti√™u', 'ƒë·∫ßu t∆∞', 'spending', 'investment'], message: 'ƒë√¢y l√† m·ªôt c√¢u h·ªèi v·ªÅ t√†i ch√≠nh. b·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin ƒë·ªÉ t√¥i h·ªó tr·ª£ chi ti·∫øt h∆°n v·ªÅ chi ti√™u ho·∫∑c ƒë·∫ßu t∆∞?' },
            { keywords: ['ch√†o', 'gi·ªõi thi·ªáu', 'hello', 'introduce', 'hi', 'helo', 'halo', 'xin ch√†o'], message: 'ch√†o b·∫°n! t√¥i l√† tr·ª£ l√Ω t√†i ch√≠nh c·ªßa b·∫°n. t√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω chi ti√™u, ƒë·∫ßu t∆∞ ho·∫∑c gi·∫£i th√≠ch c√°c kh√°i ni·ªám t√†i ch√≠nh. b·∫°n c·∫ßn gi√∫p g√¨ ngay b√¢y gi·ªù?' },
            { keywords: ['kh√°i ni·ªám', 'ƒë·ªãnh nghƒ©a', 'concept', 'definition'], message: 'b·∫°n mu·ªën t√¥i gi·∫£i th√≠ch kh√°i ni·ªám n√†o trong t√†i ch√≠nh? v√≠ d·ª• nh∆∞ ti·∫øt ki·ªám, ƒë·∫ßu t∆∞ hay t·ª∑ l·ªá l·∫°m ph√°t?' }
        ];

        for (let response of responses) {
            if (response.keywords.some(keyword => userMessage.includes(keyword))) {
                return res.json({ status: 'success', message: response.message });
            }
        }

        const prompt = `b·∫°n l√† m·ªôt tr·ª£ l√Ω t√†i ch√≠nh. h√£y ph√¢n t√≠ch tin nh·∫Øn v√† tr·∫£ v·ªÅ json v·ªõi c·∫•u tr√∫c: { "amount": <s·ªë ti·ªÅn d·∫°ng s·ªë>, "description": "<m√¥ t·∫£>", "date": "<yyyy-mm-dd ho·∫∑c yyyy-mm ho·∫∑c yyyy>" } n·∫øu thi·∫øu d·ªØ li·ªáu, h√£y ƒë·ªÉ gi√° tr·ªã l√† null. tin nh·∫Øn: "${message}"`;

        const result = await model.generateContent([prompt]);
        const response = await result.response;
        let rawText = await response.text();
        rawText = rawText.replace(/```json|```/gi, '').trim();
        let parsedData;
        try {
            parsedData = JSON.parse(rawText);
        } catch (error) {
            return res.json({
                status: 'pending',
                message: `kh√¥ng th·ªÉ ph√¢n t√≠ch tin nh·∫Øn, vui l√≤ng nh·∫≠p l·∫°i${response}`,
            });
        }

        if (parsedData.amount) session.amount = Number(parsedData.amount);
        if (parsedData.description) session.description = parsedData.description.trim();
        if (parsedData.date) session.date = parsedData.date.trim();

        if (session.date) {
            if (/^\d{4}-\d{2}$/.test(session.date)) {
                return res.json({ status: 'pending', message: `b·∫°n ƒë√£ nh·∫≠p th√°ng ${session.date.split('-')[1]}/${session.date.split('-')[0]}. h√£y nh·∫≠p th√™m ng√†y c·ª• th·ªÉ (vd: 15/${session.date.split('-')[1]}/${session.date.split('-')[0]})` });
            }
            if (/^\d{4}$/.test(session.date)) {
                return res.json({ status: 'pending', message: `b·∫°n ƒë√£ nh·∫≠p nƒÉm ${session.date}. h√£y nh·∫≠p th√™m th√°ng & ng√†y c·ª• th·ªÉ (vd: 01/06/${session.date})` });
            }
            if (!moment(session.date, 'YYYY-MM-DD', true).isValid()) {
                return res.json({ status: 'error', message: 'ng√†y kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng yyyy-mm-dd' });
            }
        }

        let missingFields = [];
        if (!session.amount) missingFields.push('s·ªë ti·ªÅn');
        if (!session.description) missingFields.push('m√¥ t·∫£');
        if (!session.date) missingFields.push('ng√†y');

        if (missingFields.length > 0) {
            return res.json({ status: 'pending', message: `b·∫°n ch∆∞a nh·∫≠p ƒë·ªß th√¥ng tin, h√£y b·ªï sung: ${missingFields.join(', ')}` });
        }

        const cleanedDescription = session.description.replace(/\\/g, '');
        const newIncome = new Income({
            userId, 
            amount: session.amount, 
            description: cleanedDescription, 
            date: session.date
        });

        await newIncome.save(); 
        delete userSessions[userId];
        return res.json({ status: 'success', message: 'Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c l∆∞u üéâ', data: newIncome });

    } catch (error) {
        console.error('l·ªói h·ªá th·ªëng:', error);
        res.status(500).json({ status: 'error', message: error.message });
    }
};
